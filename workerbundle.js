(()=>{"use strict";var t={19:function(t,e,s){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=a(s(477)),i=a(s(465)),n=a(s(196));class h{constructor(t,e){if(this.unknownCards=new r.default,this.playerSeenVoidInSuits=[],this.cardsIPassed=[],t.hasOwnProperty("whoAmI")){const e=t;this.unknownCards=new r.default(e.unknownCards),this.playerSeenVoidInSuits=e.playerSeenVoidInSuits,this.cardsIPassed.length=0,e.cardsIPassed.forEach((t=>{this.cardsIPassed.push(new n.default(t))})),this.gameHand=new i.default(e.gameHand),this.whoAmI=e.whoAmI}else this.gameHand=t,this.whoAmI=e,this.resetHand()}observeSelf(){this.gameHand.registerObserver(this)}setHand(t){this.gameHand=t}choosePassingCards(){performance.now();const t=this.gameHand.getHand(this.whoAmI),e=new Array(286).fill(0),s=new Array(286).fill([]);let a=0;for(let r=0;r<11;++r)for(let n=r+1;n<12;++n)for(let o=n+1;o<13;++o){const d=[t.at(r),t.at(n),t.at(o)];s[a]=d;for(let t=Math.floor(h.LEVEL/572)+1;t>0;--t){const t=new i.default(this.gameHand),s=[new h(t,0),new h(t,1),new h(t,2),new h(t,3)];t.setHands(this.speculateHands(t.getPassingDirection()));for(let e=0;e<4;++e)e===this.whoAmI?t.pass(e,(e+this.gameHand.getPassingDirection())%4,d):t.pass(e,(e+this.gameHand.getPassingDirection())%4,t.getHand(e).pickRandom(3));t.receivePassedCards();for(let e=13;e>0;--e){for(t.resetTrick();t.turnsLeftInTrick();)t.playCard(s[t.getWhoseTurn()].simPlayCard());t.endTrick()}t.endHand(),e[a]+=t.getScore(this.whoAmI)}++a}let r=0;for(a=0;a<286;++a)e[a]<e[r]&&(r=a);performance.now();return this.whoAmI,t.forEach((t=>{t.str()})),s[r],s[r]}speculateHands(t){const e=[new r.default,new r.default,new r.default,new r.default],s=[this.gameHand.getHand(0).length(),this.gameHand.getHand(1).length(),this.gameHand.getHand(2).length(),this.gameHand.getHand(3).length()];s[this.whoAmI]=0;const a=(this.whoAmI+t)%4;function i(t){return s[t]>0}s[a]-=this.cardsIPassed.length;const n=[];for(let t=0;t<4;++t)n.push([!this.playerSeenVoidInSuits[0][t]&&0!==this.whoAmI,!this.playerSeenVoidInSuits[1][t]&&1!==this.whoAmI,!this.playerSeenVoidInSuits[2][t]&&2!==this.whoAmI,!this.playerSeenVoidInSuits[3][t]&&3!==this.whoAmI]);const h=[];return this.unknownCards.forEach((t=>{if(h.length=0,n[t.suit].forEach(((t,e)=>{t&&i(e)&&h.push(e)})),h.length){const a=h[Math.floor(Math.random()*h.length)];e[a].insert(t),--s[a]}else{const a=[!1,!1,!1,!1];for(let t=0;t<4;++t)if(i(t))for(let e=0;e<4;++e)n[e][t]&&(a[e]=!0);const r=[],h=[];if(n[t.suit].forEach(((t,s)=>{t&&e[s].forEach((t=>{a[t.suit]&&(r.push(t),h.push(s))}))})),r.length){const a=Math.floor(Math.random()*r.length),o=[];n[r[a].suit].forEach(((t,e)=>{t&&i(e)&&o.push(e)})),0===o.length&&console.error("ERROR: assertion fail, single swap, no place to put swap card");const d=o[Math.floor(Math.random()*o.length)];e[d].insert(r[a]),e[h[a]].remove(r[a]),e[h[a]].insert(t),--s[d]}else{const h=n[t.suit].indexOf(!0);let o=0;for(let t=0;t<4;++t)if(i(t)){o=t;break}let d=0;for(;d===h||d===this.whoAmI||d===o;)++d;1!==n[t.suit].filter((t=>t)).length&&console.error("ERROR: big assertion was wrong, hands that allow this suit != 1");const l=[];e[d].forEach((t=>{a[t.suit]&&l.push(t)})),0===l.length&&console.error("ERROR: big assertion was wrong, no cards to move from 3rd to 2nd");const u=l[Math.floor(Math.random()*l.length)];e[o].insert(u),e[d].remove(u),--s[o],e[h].forEach((t=>{this.playerSeenVoidInSuits[d][t.suit]||r.push(t)})),0===r.length&&console.error("ERROR: big assertion was wrong, no cards to move from 1st to 3rd");const c=r[Math.floor(Math.random()*r.length)];e[d].insert(c),e[h].remove(c),e[h].insert(t)}}})),this.gameHand.getHand(this.whoAmI).forEach((t=>{e[this.whoAmI].insert(t)})),this.cardsIPassed.forEach((t=>{e[a].insert(t)})),e}resetHand(){this.unknownCards.fill(),this.cardsIPassed.length=0,this.playerSeenVoidInSuits=[[!1,!1,!1,!1],[!1,!1,!1,!1],[!1,!1,!1,!1],[!1,!1,!1,!1]]}dealHands(){this.whoAmI,this.gameHand.getHand(this.whoAmI).forEach((t=>{this.unknownCards.remove(t),t.str()}))}pass(t,e,s){t===this.whoAmI&&(this.cardsIPassed=s.slice())}receivePassedCards(){this.whoAmI,this.gameHand.getHand(this.whoAmI).forEach((t=>{this.unknownCards.remove(t),t.str()}))}resetTrick(){}seeCardPlayed(t,e,s=!1){this.unknownCards.remove(t);let a=-1;this.cardsIPassed.forEach(((e,s)=>{t.value===e.value&&t.suit===e.suit&&(a=s)})),-1!==a&&this.cardsIPassed.splice(a,1);const r=this.gameHand.getPlayedCards()[this.gameHand.getTrickLeader()].suit;t.suit!==r&&(this.playerSeenVoidInSuits[e][r]=!0),s&&(this.playerSeenVoidInSuits[e][n.default.CLUBS]=!0,this.playerSeenVoidInSuits[e][n.default.DIAMONDS]=!0,this.playerSeenVoidInSuits[e][n.default.SPADES]=!0)}staticPlayAI(){const t=this.gameHand.findValidChoices();if(this.gameHand.getPlayedCardCount()>0){const e=this.gameHand.getPlayedCards()[this.gameHand.getTrickLeader()];if(t[0].suit===e.suit){if(t[0].value<e.value){for(let s=t.length-1;s>=0;--s)if(t[s].value<e.value)return 13===t[s].value&&t[s].suit===n.default.SPADES&&s>0&&12===t[s-1].value?t[s-1]:t[s];return console.error("ERROR: should never get here"),t[0]}if(this.gameHand.getPlayedCardCount()<3)return e.suit===n.default.SPADES&&12===t[0].value&&t.length>1?t[1]:t[0];{const s=t[t.length-1];return e.suit===n.default.SPADES&&12===s.value&&t.length>1?t[t.length-2]:s}}{const e=[];for(let s=t.length-1;s>=0;--s)if(t[s].suit===n.default.SPADES){if(!(t[s].value>11))break;e.push(t[s])}if(e.length)return e[e.length-1];{let e=t[0].suit,s=e,a=t[0].value;for(let r=1;r<t.length;++r)t[r].suit!==e&&(e=t[r].suit,t[r].value>a&&(s=e,a=t[r].value));const r=this.gameHand.getHand(this.gameHand.getWhoseTurn()).getSuit(s);return r[r.length-1]}}}{const e=t.filter((t=>t.value<12||t.suit!==n.default.SPADES));return e.length?e[Math.floor(Math.random()*e.length)]:t[0]}}simPlayCard(){const t=this.gameHand.getHand(this.gameHand.getWhoseTurn()).length(),e=this.gameHand.getShootMoonPossible()?t>12?10:-.8*t+11.5:2;if(10*Math.random()<e){const t=this.gameHand.findValidChoices();return t[Math.floor(Math.random()*t.length)]}return this.staticPlayAI()}dynamicPlay(){const t=this.gameHand.findValidChoices();if(1===t.length)return t[0];const e=t.map((()=>0)),s=Math.floor(h.LEVEL/t.length/this.gameHand.getHand(this.gameHand.getWhoseTurn()).length())+1;for(let a=s;a>0;--a)t.forEach(((t,s)=>{const a=new i.default(this.gameHand),r=new h(a,this.whoAmI);a.setHands(this.speculateHands(a.getPassingDirection())),a.playCard(t);do{for(;a.turnsLeftInTrick();)a.playCard(r.simPlayCard());a.endTrick(),a.getHand(0).length()&&a.resetTrick()}while(a.getHand(0).length());a.endHand(),e[s]+=a.getScore(this.whoAmI)}));let a=0;t[0].str(),e[0];for(let s=1;s<t.length;++s)e[s]<e[a]&&(a=s),t[s].str(),e[s];return t[a]}}h.LEVEL=1e4,e.default=h},196:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t,e){if(t.hasOwnProperty("suit")){const e=t;this.value=e.value,this.suit=e.suit}else this.value=t,this.suit=e}static find(t,e){let s=0,a=t.length,r=a>>1;for(;r<a;){if(t[r].value===e.value)return r;t[r].value>e.value?a=r:s=r+1,r=s+a>>1}return-1}str(){let t;switch(this.value){case 1:case 14:t="Ace of ";break;case 11:t="Jack of ";break;case 12:t="Queen of ";break;case 13:t="King of ";break;default:t=this.value.toString(),t+=" of "}switch(this.suit){case s.CLUBS:t+="Clubs";break;case s.DIAMONDS:t+="Diamonds";break;case s.SPADES:t+="Spades";break;case s.HEARTS:t+="Hearts";break;default:t+="UNKNOWN SUIT"}return t}hash(){return(this.value<<2)+this.suit}}s.CLUBS=0,s.DIAMONDS=1,s.SPADES=2,s.HEARTS=3,s.SUIT_COUNT=4,e.default=s},477:function(t,e,s){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=a(s(196));e.default=class{constructor(t){this.cards=[[],[],[],[]],t&&t.cards.forEach(((t,e)=>{t.forEach((t=>{this.cards[e].push(new r.default(t))}))}))}length(t=-1){return-1===t?this.cards[0].length+this.cards[1].length+this.cards[2].length+this.cards[3].length:this.cards[t].length}getSuitAndIndex(t){let e=0;for(;e<4&&t>=this.cards[e].length;)t-=this.cards[e].length,e+=1;return e<4?{suit:e,index:t}:null}at(t){const e=this.getSuitAndIndex(t);return e?this.cards[e.suit][e.index]:null}forEach(t){let e=0;this.cards.forEach((s=>{s.forEach((s=>{t(s,e),++e}))}))}find(t){let e=r.default.find(this.cards[t.suit],t);if(-1===e)return-1;for(let s=0;s<t.suit;++s)e+=this.cards[s].length;return e}remove(t){let e,s;if(t.hasOwnProperty("suit")){const a=t;if(s=this.cards[a.suit],e=r.default.find(s,a),-1===e)return}else{const a=this.getSuitAndIndex(t);if(!a)return;s=this.cards[a.suit],e=a.index}s.splice(e,1)}insert(t){const e=this.cards[t.suit];let s=0;for(;s<e.length&&!(e[s].value>t.value);++s);e.splice(s,0,t)}clear(){this.cards.forEach((t=>{t.length=0}))}fill(){this.cards.forEach(((t,e)=>{t.length=0;for(let s=2;s<15;++s)t.push(new r.default(s,e))}))}dealOne(){const t=Math.floor(Math.random()*this.length()),e=this.at(t);return this.remove(t),e}pickRandom(t){const e=[],s=[0,1,2,3,4,5,6,7,8,9,10,11,12];!function(t){for(let e=t.length-1;e>0;--e){const s=Math.floor(Math.random()*(e+1));[t[e],t[s]]=[t[s],t[e]]}}(s);for(let a=0;a<t;++a)e.push(this.at(s[a]));return e}getSuit(t){return this.cards[t]}slice(){return this.cards[0].concat(this.cards[1],this.cards[2],this.cards[3])}}},465:function(t,e,s){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=a(s(477)),i=a(s(196)),n=new i.default(0,0);e.default=class{constructor(t){if(this.hands=[new r.default,new r.default,new r.default,new r.default],this.scores=[0,0,0,0],this.passingDirection=0,this.passedCardsToPlayer=[[],[],[],[]],this.passCount=0,this.playedCards=[n,n,n,n],this.playedCardCount=0,this.trickLeader=0,this.whoseTurn=0,this.heartsBroken=!1,this.pointsPlayedThisTrick=!1,this._trickHistory=[],this.shootMoonPossible=!0,this.observerList=[],t){this.hands[0]=new r.default(t.hands[0]),this.hands[1]=new r.default(t.hands[1]),this.hands[2]=new r.default(t.hands[2]),this.hands[3]=new r.default(t.hands[3]),this.scores=t.scores.map((t=>t)),this.passingDirection=t.passingDirection;for(let e=0;e<4;++e)this.passedCardsToPlayer[e].length=0,t.passedCardsToPlayer[e].forEach((t=>{this.passedCardsToPlayer[e].push(new i.default(t))}));this.passCount=t.passCount,this.playedCards[0]=new i.default(t.playedCards[0]),this.playedCards[1]=new i.default(t.playedCards[1]),this.playedCards[2]=new i.default(t.playedCards[2]),this.playedCards[3]=new i.default(t.playedCards[3]),this.playedCardCount=t.playedCardCount,this.trickLeader=t.trickLeader,this.whoseTurn=t.whoseTurn,this.heartsBroken=t.heartsBroken,this.pointsPlayedThisTrick=t.pointsPlayedThisTrick,this._trickHistory=t._trickHistory.map((t=>({cards:t.cards.map((t=>new i.default(t))),whoWon:t.whoWon}))),this.shootMoonPossible=t.shootMoonPossible}}get trickHistory(){return this._trickHistory}registerObserver(t){this.observerList.push(t)}getWhoseTurn(){return this.whoseTurn}getHand(t){return this.hands[t]}getScore(t){return this.scores[t]}getPassingDirection(){return this.passingDirection}turnsLeftInTrick(){return 4-this.playedCardCount}heartsIsBroken(){return this.heartsBroken}getPassCount(){return this.passCount}getPlayedCards(){return this.playedCards}getPlayedCardCount(){return this.playedCardCount}getPreviousTrick(){const t=this._trickHistory.length;return t?this._trickHistory[t-1]:{cards:[],whoWon:0}}getTrickLeader(){return this.trickLeader}getPassedCardsToPlayer(t){return this.passedCardsToPlayer[t]}getShootMoonPossible(){return this.shootMoonPossible}setPassed(){this.passCount=4}setHands(t){this.hands=t}resetHand(t){this.passingDirection=t;for(let t=0;t<4;++t)this.hands[t].clear(),this.scores[t]=0,this.passedCardsToPlayer[t].length=0;this.passCount=0,this.heartsBroken=!1,this._trickHistory.length=0,this.shootMoonPossible=!0,this.observerList.forEach((t=>{t.resetHand()}))}dealHands(){const t=new r.default;for(t.fill();t.length();)for(let e=0;e<4;++e){const s=t.dealOne();this.hands[e].insert(s),2===s.value&&s.suit===i.default.CLUBS&&(this.whoseTurn=e)}this.observerList.forEach((t=>{t.dealHands()}))}pass(t,e,s){s.forEach((s=>{this.passedCardsToPlayer[e].push(s),this.hands[t].remove(s)})),++this.passCount,this.observerList.forEach((a=>{a.pass(t,e,s)}))}receivePassedCards(){for(let t=0;t<4;++t)this.passedCardsToPlayer[t].forEach((e=>{this.hands[t].insert(e),2===e.value&&e.suit===i.default.CLUBS&&(this.whoseTurn=t)}));this.observerList.forEach((t=>{t.receivePassedCards()}))}resetTrick(){this.playedCards=[n,n,n,n],this.playedCardCount=0,this.trickLeader=this.whoseTurn,this.pointsPlayedThisTrick=!1,this.observerList.forEach((t=>{t.resetTrick()}))}takesLead(t){return t.suit===this.playedCards[this.trickLeader].suit&&t.value>this.playedCards[this.trickLeader].value}playCard(t){this.hands[this.whoseTurn].remove(t),this.playedCards[this.whoseTurn]=t,++this.playedCardCount,this.takesLead(t)&&(this.trickLeader=this.whoseTurn);let e=!1;t.suit===i.default.HEARTS&&(1!==this.playedCardCount||this.heartsBroken||(e=!0),this.heartsBroken=!0),this.pointsFor(t)&&(this.pointsPlayedThisTrick=!0);const s=this.whoseTurn;if(this.shootMoonPossible&&this.pointsPlayedThisTrick){let t=-1;for(let e=0;e<4;++e)if(this.getScore(e)){t=e;break}if(-1!==t){let e=!1,a=(s+5-this.getPlayedCardCount())%4;for(let s=this.getPlayedCardCount();s>0;--s){if(a===t){e=!0;break}a=(a+1)%4}e&&t!==this.getTrickLeader()&&(this.shootMoonPossible=!1)}}this.whoseTurn=(this.whoseTurn+1)%4,this.observerList.forEach((a=>{a.seeCardPlayed(t,s,e)}))}pointsFor(t){return t.suit===i.default.HEARTS?1:12===t.value&&t.suit===i.default.SPADES?13:0}endTrick(){this.playedCards.forEach((t=>{this.scores[this.trickLeader]+=this.pointsFor(t)})),this.whoseTurn=this.trickLeader,this._trickHistory.push({cards:this.playedCards.slice(),whoWon:this.trickLeader})}endHand(){this.playedCards=[n,n,n,n],this.playedCardCount=0;for(let t=0;t<4;++t){if(26===this.scores[t]){this.scores[t]=0;for(let e=0;e<4;++e)e!==t&&(this.scores[e]=26);return t}if(this.scores[t]>0)return-1}return alert("this should never happen, invalid scores"),-2}findValidChoices(){const t=this.hands[this.whoseTurn];if(13===t.length()){if(0===this.playedCardCount)return[new i.default(2,i.default.CLUBS)];if(t.length(i.default.CLUBS))return t.getSuit(i.default.CLUBS);{const e=[];return t.forEach((t=>{this.pointsFor(t)||e.push(t)})),e.length?e:t.slice()}}if(0===this.playedCardCount){if(this.heartsBroken)return t.slice();if(t.length(i.default.HEARTS)===t.length())return t.slice();const e=[];return t.forEach((t=>{t.suit!==i.default.HEARTS&&e.push(t)})),e}return t.length(this.playedCards[this.trickLeader].suit)?t.getSuit(this.playedCards[this.trickLeader].suit):t.slice()}}},523:function(t,e,s){var a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=a(s(19)),i=self;i.addEventListener("message",(t=>{if(t.data.length){const e=new r.default(t.data[1]),s=new r.default(t.data[2]),a=new r.default(t.data[3]),n=e.choosePassingCards(),h=s.choosePassingCards(),o=a.choosePassingCards();i.postMessage([null,n,h,o])}else{const e=new r.default(t.data);e.observeSelf(),i.postMessage(e.dynamicPlay())}}))}},e={};!function s(a){if(e[a])return e[a].exports;var r=e[a]={exports:{}};return t[a].call(r.exports,r,r.exports,s),r.exports}(523)})();